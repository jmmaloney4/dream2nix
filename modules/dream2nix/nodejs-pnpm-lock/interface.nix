{
  config,
  options,
  lib,
  ...
}: let
  l = lib // builtins;
  t = l.types;
  cfg = config.nodejs-pnpm-lock;
in {
  options.nodejs-pnpm-lock = l.mapAttrs (_: l.mkOption) {
    dreamLock = {
      type = t.attrs;
      internal = true;
      description = "The content of the dream2nix generated lock file";
    };
    packageJsonFile = {
      type = t.path;
      description = ''
        The package.json file to use.
      '';
      default = cfg.source + "/package.json";
      defaultText = "\${cfg.source}/package.json";
    };
    packageJson = {
      type = t.attrs;
      description = "The content of the package.json";
    };
    pnpmLockFile = {
      type = t.nullOr t.path;
      description = ''
        The pnpm-lock.yaml file to use.
        This file contains the exact dependency tree and integrity hashes
        generated by pnpm.
      '';
      default = cfg.source + "/pnpm-lock.yaml";
      defaultText = "\${cfg.source}/pnpm-lock.yaml";
    };
    pnpmLock = {
      type = t.attrs;
      description = "The content of the pnpm-lock.yaml";
    };
    pnpmWorkspaceFile = {
      type = t.nullOr t.path;
      description = ''
        The pnpm-workspace.yaml file to use.
        This file defines the workspace packages and their locations.
      '';
      default = cfg.source + "/pnpm-workspace.yaml";
      defaultText = "\${cfg.source}/pnpm-workspace.yaml";
    };
    pnpmWorkspace = {
      type = t.attrs;
      description = "The content of the pnpm-workspace.yaml";
    };
    source = {
      type = t.either t.path t.package;
      description = "Source of the package";
    };
    withDevDependencies = {
      type = t.bool;
      default = true;
      description = ''
        Whether to include development dependencies.
        Usually it's a bad idea to disable this, as development dependencies can contain important build time dependencies.
      '';
    };
    workspaces = {
      type = t.listOf t.str;
      description = ''
        Workspaces to include.
        Defaults to the ones defined in pnpm-workspace.yaml.
        If pnpm-workspace.yaml doesn't exist, falls back to package.json workspaces field.
      '';
      default = [];
    };
    resolveWorkspaceProtocol = {
      type = t.bool;
      default = true;
      description = ''
        Whether to resolve pnpm's 'workspace:' protocol dependencies.
        When enabled, workspace: dependencies will be resolved to their actual versions
        from the local workspace packages.
      '';
    };
    strictPeerDependencies = {
      type = t.bool;
      default = true;
      description = ''
        Whether to enforce strict peer dependency resolution like pnpm does.
        When enabled, will create separate dependency sets for different peer dependency combinations.
      '';
    };
  };
}